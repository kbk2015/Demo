import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseResult;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.AnnotationExpr;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Optional;

public class RestServiceTraversal {
    public static void main(String[] args) throws FileNotFoundException {
        // Load your Java source file
        File javaFile = new File("YourRestServiceClass.java");
        
        // Parse the Java source file
        ParseResult<CompilationUnit> parseResult = new JavaParser().parse(javaFile);
        
        if (parseResult.isSuccessful()) {
            CompilationUnit compilationUnit = parseResult.getResult().get();
            
            // Traverse the AST to find REST service-related code
            compilationUnit.accept(new RestServiceVisitor(), null);
        } else {
            System.out.println("Parsing failed.");
        }
    }
}

class RestServiceVisitor extends VoidVisitorAdapter<Void> {
    @Override
    public void visit(MethodDeclaration methodDeclaration, Void arg) {
        // Check if the method has REST annotations
        Optional<AnnotationExpr> getAnnotation = methodDeclaration.getAnnotationByName("GET");
        Optional<AnnotationExpr> postAnnotation = methodDeclaration.getAnnotationByName("POST");
        
        if (getAnnotation.isPresent()) {
            System.out.println("Found GET endpoint: " + methodDeclaration.getName());
        }
        
        if (postAnnotation.isPresent()) {
            System.out.println("Found POST endpoint: " + methodDeclaration.getName());
        }
        
        super.visit(methodDeclaration, arg);
    }
}
